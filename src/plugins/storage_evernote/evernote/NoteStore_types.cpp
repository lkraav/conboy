/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "NoteStore_types.h"

namespace evernote { namespace edam {

const char* SyncState::ascii_fingerprint = "2D37F7155AE775C329078C137087C461";
const uint8_t SyncState::binary_fingerprint[16] = {0x2D,0x37,0xF7,0x15,0x5A,0xE7,0x75,0xC3,0x29,0x07,0x8C,0x13,0x70,0x87,0xC4,0x61};

uint32_t SyncState::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  bool isset_currentTime = false;
  bool isset_fullSyncBefore = false;
  bool isset_updateCount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          isset_currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fullSyncBefore);
          isset_fullSyncBefore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateCount);
          isset_updateCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploaded);
          this->__isset.uploaded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currentTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fullSyncBefore)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_updateCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SyncState::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SyncState");
  xfer += oprot->writeFieldBegin("currentTime", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->currentTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("fullSyncBefore", apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->fullSyncBefore);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("updateCount", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->updateCount);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.uploaded) {
    xfer += oprot->writeFieldBegin("uploaded", apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->uploaded);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SyncChunk::ascii_fingerprint = "A169439675E1057DC2BBB4D64E594D96";
const uint8_t SyncChunk::binary_fingerprint[16] = {0xA1,0x69,0x43,0x96,0x75,0xE1,0x05,0x7D,0xC2,0xBB,0xB4,0xD6,0x4E,0x59,0x4D,0x96};

uint32_t SyncChunk::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  bool isset_currentTime = false;
  bool isset_updateCount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          isset_currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chunkHighUSN);
          this->__isset.chunkHighUSN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateCount);
          isset_updateCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->notes.clear();
            uint32_t _size0;
            apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->notes.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->notes[_i4].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->notebooks.clear();
            uint32_t _size5;
            apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->notebooks.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->notebooks[_i9].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.notebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->tags.clear();
            uint32_t _size10;
            apache::thrift::protocol::TType _etype13;
            iprot->readListBegin(_etype13, _size10);
            this->tags.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->tags[_i14].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->searches.clear();
            uint32_t _size15;
            apache::thrift::protocol::TType _etype18;
            iprot->readListBegin(_etype18, _size15);
            this->searches.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += this->searches[_i19].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.searches = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->resources.clear();
            uint32_t _size20;
            apache::thrift::protocol::TType _etype23;
            iprot->readListBegin(_etype23, _size20);
            this->resources.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->resources[_i24].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.resources = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->expungedNotes.clear();
            uint32_t _size25;
            apache::thrift::protocol::TType _etype28;
            iprot->readListBegin(_etype28, _size25);
            this->expungedNotes.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readString(this->expungedNotes[_i29]);
            }
            iprot->readListEnd();
          }
          this->__isset.expungedNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->expungedNotebooks.clear();
            uint32_t _size30;
            apache::thrift::protocol::TType _etype33;
            iprot->readListBegin(_etype33, _size30);
            this->expungedNotebooks.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += iprot->readString(this->expungedNotebooks[_i34]);
            }
            iprot->readListEnd();
          }
          this->__isset.expungedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->expungedTags.clear();
            uint32_t _size35;
            apache::thrift::protocol::TType _etype38;
            iprot->readListBegin(_etype38, _size35);
            this->expungedTags.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              xfer += iprot->readString(this->expungedTags[_i39]);
            }
            iprot->readListEnd();
          }
          this->__isset.expungedTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->expungedSearches.clear();
            uint32_t _size40;
            apache::thrift::protocol::TType _etype43;
            iprot->readListBegin(_etype43, _size40);
            this->expungedSearches.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += iprot->readString(this->expungedSearches[_i44]);
            }
            iprot->readListEnd();
          }
          this->__isset.expungedSearches = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currentTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_updateCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SyncChunk::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SyncChunk");
  xfer += oprot->writeFieldBegin("currentTime", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->currentTime);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.chunkHighUSN) {
    xfer += oprot->writeFieldBegin("chunkHighUSN", apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->chunkHighUSN);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("updateCount", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->updateCount);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.notes) {
    xfer += oprot->writeFieldBegin("notes", apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->notes.size());
      std::vector<evernote::edam::Note> ::const_iterator _iter45;
      for (_iter45 = this->notes.begin(); _iter45 != this->notes.end(); ++_iter45)
      {
        xfer += (*_iter45).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebooks) {
    xfer += oprot->writeFieldBegin("notebooks", apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->notebooks.size());
      std::vector<evernote::edam::Notebook> ::const_iterator _iter46;
      for (_iter46 = this->notebooks.begin(); _iter46 != this->notebooks.end(); ++_iter46)
      {
        xfer += (*_iter46).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tags) {
    xfer += oprot->writeFieldBegin("tags", apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->tags.size());
      std::vector<evernote::edam::Tag> ::const_iterator _iter47;
      for (_iter47 = this->tags.begin(); _iter47 != this->tags.end(); ++_iter47)
      {
        xfer += (*_iter47).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.searches) {
    xfer += oprot->writeFieldBegin("searches", apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->searches.size());
      std::vector<evernote::edam::SavedSearch> ::const_iterator _iter48;
      for (_iter48 = this->searches.begin(); _iter48 != this->searches.end(); ++_iter48)
      {
        xfer += (*_iter48).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resources) {
    xfer += oprot->writeFieldBegin("resources", apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->resources.size());
      std::vector<evernote::edam::Resource> ::const_iterator _iter49;
      for (_iter49 = this->resources.begin(); _iter49 != this->resources.end(); ++_iter49)
      {
        xfer += (*_iter49).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expungedNotes) {
    xfer += oprot->writeFieldBegin("expungedNotes", apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->expungedNotes.size());
      std::vector<evernote::edam::Guid> ::const_iterator _iter50;
      for (_iter50 = this->expungedNotes.begin(); _iter50 != this->expungedNotes.end(); ++_iter50)
      {
        xfer += oprot->writeString((*_iter50));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expungedNotebooks) {
    xfer += oprot->writeFieldBegin("expungedNotebooks", apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->expungedNotebooks.size());
      std::vector<evernote::edam::Guid> ::const_iterator _iter51;
      for (_iter51 = this->expungedNotebooks.begin(); _iter51 != this->expungedNotebooks.end(); ++_iter51)
      {
        xfer += oprot->writeString((*_iter51));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expungedTags) {
    xfer += oprot->writeFieldBegin("expungedTags", apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->expungedTags.size());
      std::vector<evernote::edam::Guid> ::const_iterator _iter52;
      for (_iter52 = this->expungedTags.begin(); _iter52 != this->expungedTags.end(); ++_iter52)
      {
        xfer += oprot->writeString((*_iter52));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expungedSearches) {
    xfer += oprot->writeFieldBegin("expungedSearches", apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->expungedSearches.size());
      std::vector<evernote::edam::Guid> ::const_iterator _iter53;
      for (_iter53 = this->expungedSearches.begin(); _iter53 != this->expungedSearches.end(); ++_iter53)
      {
        xfer += oprot->writeString((*_iter53));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NoteFilter::ascii_fingerprint = "E3FEA280E924E0A51D5D872FA8A51D7F";
const uint8_t NoteFilter::binary_fingerprint[16] = {0xE3,0xFE,0xA2,0x80,0xE9,0x24,0xE0,0xA5,0x1D,0x5D,0x87,0x2F,0xA8,0xA5,0x1D,0x7F};

uint32_t NoteFilter::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ascending);
          this->__isset.ascending = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->words);
          this->__isset.words = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookGuid);
          this->__isset.notebookGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->tagGuids.clear();
            uint32_t _size54;
            apache::thrift::protocol::TType _etype57;
            iprot->readListBegin(_etype57, _size54);
            this->tagGuids.resize(_size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              xfer += iprot->readString(this->tagGuids[_i58]);
            }
            iprot->readListEnd();
          }
          this->__isset.tagGuids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timeZone);
          this->__isset.timeZone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inactive);
          this->__isset.inactive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteFilter::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NoteFilter");
  if (this->__isset.order) {
    xfer += oprot->writeFieldBegin("order", apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->order);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ascending) {
    xfer += oprot->writeFieldBegin("ascending", apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->ascending);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.words) {
    xfer += oprot->writeFieldBegin("words", apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->words);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookGuid) {
    xfer += oprot->writeFieldBegin("notebookGuid", apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->notebookGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagGuids) {
    xfer += oprot->writeFieldBegin("tagGuids", apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->tagGuids.size());
      std::vector<evernote::edam::Guid> ::const_iterator _iter59;
      for (_iter59 = this->tagGuids.begin(); _iter59 != this->tagGuids.end(); ++_iter59)
      {
        xfer += oprot->writeString((*_iter59));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timeZone) {
    xfer += oprot->writeFieldBegin("timeZone", apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->timeZone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inactive) {
    xfer += oprot->writeFieldBegin("inactive", apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->inactive);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NoteList::ascii_fingerprint = "DEB3817E0450DCCACC3B6F71600E8172";
const uint8_t NoteList::binary_fingerprint[16] = {0xDE,0xB3,0x81,0x7E,0x04,0x50,0xDC,0xCA,0xCC,0x3B,0x6F,0x71,0x60,0x0E,0x81,0x72};

uint32_t NoteList::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  bool isset_startIndex = false;
  bool isset_totalNotes = false;
  bool isset_notes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startIndex);
          isset_startIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalNotes);
          isset_totalNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->notes.clear();
            uint32_t _size60;
            apache::thrift::protocol::TType _etype63;
            iprot->readListBegin(_etype63, _size60);
            this->notes.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += this->notes[_i64].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->stoppedWords.clear();
            uint32_t _size65;
            apache::thrift::protocol::TType _etype68;
            iprot->readListBegin(_etype68, _size65);
            this->stoppedWords.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readString(this->stoppedWords[_i69]);
            }
            iprot->readListEnd();
          }
          this->__isset.stoppedWords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->searchedWords.clear();
            uint32_t _size70;
            apache::thrift::protocol::TType _etype73;
            iprot->readListBegin(_etype73, _size70);
            this->searchedWords.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += iprot->readString(this->searchedWords[_i74]);
            }
            iprot->readListEnd();
          }
          this->__isset.searchedWords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_startIndex)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_totalNotes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_notes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NoteList::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NoteList");
  xfer += oprot->writeFieldBegin("startIndex", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->startIndex);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("totalNotes", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->totalNotes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("notes", apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->notes.size());
    std::vector<evernote::edam::Note> ::const_iterator _iter75;
    for (_iter75 = this->notes.begin(); _iter75 != this->notes.end(); ++_iter75)
    {
      xfer += (*_iter75).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  if (this->__isset.stoppedWords) {
    xfer += oprot->writeFieldBegin("stoppedWords", apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->stoppedWords.size());
      std::vector<std::string> ::const_iterator _iter76;
      for (_iter76 = this->stoppedWords.begin(); _iter76 != this->stoppedWords.end(); ++_iter76)
      {
        xfer += oprot->writeString((*_iter76));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.searchedWords) {
    xfer += oprot->writeFieldBegin("searchedWords", apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->searchedWords.size());
      std::vector<std::string> ::const_iterator _iter77;
      for (_iter77 = this->searchedWords.begin(); _iter77 != this->searchedWords.end(); ++_iter77)
      {
        xfer += oprot->writeString((*_iter77));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NoteCollectionCounts::ascii_fingerprint = "4A4A773E0979C92FFBF7D8D9EE2AB6F9";
const uint8_t NoteCollectionCounts::binary_fingerprint[16] = {0x4A,0x4A,0x77,0x3E,0x09,0x79,0xC9,0x2F,0xFB,0xF7,0xD8,0xD9,0xEE,0x2A,0xB6,0xF9};

uint32_t NoteCollectionCounts::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->notebookCounts.clear();
            uint32_t _size78;
            apache::thrift::protocol::TType _ktype79;
            apache::thrift::protocol::TType _vtype80;
            iprot->readMapBegin(_ktype79, _vtype80, _size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              evernote::edam::Guid _key83;
              xfer += iprot->readString(_key83);
              int32_t& _val84 = this->notebookCounts[_key83];
              xfer += iprot->readI32(_val84);
            }
            iprot->readMapEnd();
          }
          this->__isset.notebookCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->tagCounts.clear();
            uint32_t _size85;
            apache::thrift::protocol::TType _ktype86;
            apache::thrift::protocol::TType _vtype87;
            iprot->readMapBegin(_ktype86, _vtype87, _size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              evernote::edam::Guid _key90;
              xfer += iprot->readString(_key90);
              int32_t& _val91 = this->tagCounts[_key90];
              xfer += iprot->readI32(_val91);
            }
            iprot->readMapEnd();
          }
          this->__isset.tagCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trashCount);
          this->__isset.trashCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteCollectionCounts::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NoteCollectionCounts");
  if (this->__isset.notebookCounts) {
    xfer += oprot->writeFieldBegin("notebookCounts", apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, this->notebookCounts.size());
      std::map<evernote::edam::Guid, int32_t> ::const_iterator _iter92;
      for (_iter92 = this->notebookCounts.begin(); _iter92 != this->notebookCounts.end(); ++_iter92)
      {
        xfer += oprot->writeString(_iter92->first);
        xfer += oprot->writeI32(_iter92->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagCounts) {
    xfer += oprot->writeFieldBegin("tagCounts", apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, this->tagCounts.size());
      std::map<evernote::edam::Guid, int32_t> ::const_iterator _iter93;
      for (_iter93 = this->tagCounts.begin(); _iter93 != this->tagCounts.end(); ++_iter93)
      {
        xfer += oprot->writeString(_iter93->first);
        xfer += oprot->writeI32(_iter93->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trashCount) {
    xfer += oprot->writeFieldBegin("trashCount", apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->trashCount);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AdImpressions::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t AdImpressions::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t AdImpressions::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  bool isset_adId = false;
  bool isset_impressionCount = false;
  bool isset_impressionTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adId);
          isset_adId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->impressionCount);
          isset_impressionCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->impressionTime);
          isset_impressionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_adId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_impressionCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_impressionTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AdImpressions::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AdImpressions");
  xfer += oprot->writeFieldBegin("adId", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->adId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("impressionCount", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->impressionCount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("impressionTime", apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->impressionTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AdParameters::ascii_fingerprint = "79324A5AA9462D413B19AED97F540DB7";
const uint8_t AdParameters::binary_fingerprint[16] = {0x79,0x32,0x4A,0x5A,0xA9,0x46,0x2D,0x41,0x3B,0x19,0xAE,0xD9,0x7F,0x54,0x0D,0xB7};

uint32_t AdParameters::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientLanguage);
          this->__isset.clientLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->impressions.clear();
            uint32_t _size94;
            apache::thrift::protocol::TType _etype97;
            iprot->readListBegin(_etype97, _size94);
            this->impressions.resize(_size94);
            uint32_t _i98;
            for (_i98 = 0; _i98 < _size94; ++_i98)
            {
              xfer += this->impressions[_i98].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.impressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->supportHtml);
          this->__isset.supportHtml = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdParameters::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AdParameters");
  if (this->__isset.clientLanguage) {
    xfer += oprot->writeFieldBegin("clientLanguage", apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->clientLanguage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.impressions) {
    xfer += oprot->writeFieldBegin("impressions", apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->impressions.size());
      std::vector<AdImpressions> ::const_iterator _iter99;
      for (_iter99 = this->impressions.begin(); _iter99 != this->impressions.end(); ++_iter99)
      {
        xfer += (*_iter99).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.supportHtml) {
    xfer += oprot->writeFieldBegin("supportHtml", apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->supportHtml);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NoteEmailParameters::ascii_fingerprint = "C3ACA35A0D83E8AB060F23AFC26AD164";
const uint8_t NoteEmailParameters::binary_fingerprint[16] = {0xC3,0xAC,0xA3,0x5A,0x0D,0x83,0xE8,0xAB,0x06,0x0F,0x23,0xAF,0xC2,0x6A,0xD1,0x64};

uint32_t NoteEmailParameters::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->note.read(iprot);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->toAddresses.clear();
            uint32_t _size100;
            apache::thrift::protocol::TType _etype103;
            iprot->readListBegin(_etype103, _size100);
            this->toAddresses.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += iprot->readString(this->toAddresses[_i104]);
            }
            iprot->readListEnd();
          }
          this->__isset.toAddresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->ccAddresses.clear();
            uint32_t _size105;
            apache::thrift::protocol::TType _etype108;
            iprot->readListBegin(_etype108, _size105);
            this->ccAddresses.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += iprot->readString(this->ccAddresses[_i109]);
            }
            iprot->readListEnd();
          }
          this->__isset.ccAddresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subject);
          this->__isset.subject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteEmailParameters::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NoteEmailParameters");
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.note) {
    xfer += oprot->writeFieldBegin("note", apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->note.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.toAddresses) {
    xfer += oprot->writeFieldBegin("toAddresses", apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->toAddresses.size());
      std::vector<std::string> ::const_iterator _iter110;
      for (_iter110 = this->toAddresses.begin(); _iter110 != this->toAddresses.end(); ++_iter110)
      {
        xfer += oprot->writeString((*_iter110));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ccAddresses) {
    xfer += oprot->writeFieldBegin("ccAddresses", apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING, this->ccAddresses.size());
      std::vector<std::string> ::const_iterator _iter111;
      for (_iter111 = this->ccAddresses.begin(); _iter111 != this->ccAddresses.end(); ++_iter111)
      {
        xfer += oprot->writeString((*_iter111));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subject) {
    xfer += oprot->writeFieldBegin("subject", apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->subject);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
